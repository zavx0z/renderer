import { join } from "node:path"
import { $ } from "bun"

type VersionType = "patch" | "minor" | "major"

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ package.json –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ä–µ–ª–∏–∑–∞.
 * @param path –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å package.json
 * @param versionType –¢–∏–ø –≤–µ—Ä—Å–∏–∏: patch, minor, major
 */
export const updateVersion = async (path: string, versionType: VersionType = "patch") => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–µ—Ä—Å–∏–∏
  if (!["patch", "minor", "major"].includes(versionType)) {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏: ${versionType}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: patch, minor, major`)
  }

  const packageJson = JSON.parse(await Bun.file(join(path, "package.json")).text())
  console.log(`üìù –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${packageJson.version}`)

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
  await $`bun pm version ${versionType} --no-git-tag-version`

  // –ß–∏—Ç–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
  const updated = JSON.parse(await Bun.file(join(path, "package.json")).text())
  console.log(`üöÄ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${updated.version} (${versionType})`)

  // –î–æ–±–∞–≤–ª—è–µ–º package.json –∏ –¥–µ–ª–∞–µ–º amend-–∫–æ–º–º–∏—Ç
  console.log(`üìù –°–æ–∑–¥–∞—ë–º amend-–∫–æ–º–º–∏—Ç...`)
  await $`git add package.json`
  await $`git commit --amend --no-edit`

  // –°–æ–∑–¥–∞—ë–º —Ç–µ–≥
  console.log(`üè∑Ô∏è –°–æ–∑–¥–∞—ë–º —Ç–µ–≥ v${updated.version}...`)
  await $`git tag v${updated.version}`

  // –ü—É—à–∏–º main –∏ —Ç–µ–≥
  console.log(`üì§ –ü—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...`)
  await $`git push`
  await $`git push origin v${updated.version}`

  console.log(`‚úÖ –†–µ–ª–∏–∑ ${updated.version} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—à–µ–Ω!`)
}

if (import.meta.main) {
  const versionType = (process.argv[2] as VersionType) || "patch"
  await updateVersion(process.cwd(), versionType)
}
