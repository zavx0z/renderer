---
description: commit  коммит
alwaysApply: false
---
# Рекомендации по формулировке

- Для сложных изменений используйте несколько типов через `/`: [feat/test], [fix/type], ... в [квадратных скобках]
- Указывайте конкретную область: context, graph, theme, ... после [type/type] через пробел
- Держите заголовок в пределах 72 символов
- Используйте страдательное наклонение: "добавлен", "исправлен", "обновлен"

---

## Алгоритм формирования сообщения коммита

1. **Анализируй только diff между staged-файлами и предыдущим коммитом.**

   - Не используй формулировки, не подтверждённые diff (например, "переименование", если функция ранее не существовала).
   - Не включай детали процесса обсуждения, только факты по коду.

2. **Проверь git history:**

   - Если объект появляется впервые — используй тип `feat` и формулировку "добавить", "ввести", "реализовать".
   - Если объект изменяется — используй типы `fix`, `refactor`, `type` и т.д. с корректным описанием сути изменений.

3. **Если есть сомнения в трактовке изменений — уточни у пользователя, прежде чем формировать сообщение.**

4. **Сообщение коммита всегда должно быть максимально информативным и отражать реальный масштаб и суть изменений, а не только их внешний вид (например, массовая замена может быть как рефакторингом, так и внедрением нового API).**

5. **Используй только те файлы, которые уже находятся в staged (git index). Не добавляй файлы в staged самостоятельно.**

6. **Покажи пользователю сформированное commit-сообщение и всегда запрашивай подтверждение коммита после вывода сообщения. Только после явного разрешения пользователя выполняй коммит. Согласование обязательно!!!**

7. **Публикация коммита - Используйте here-document (<<EOF ... EOF) для передачи сообщения коммита через стандартный ввод:**

---

## Примеры

### 1. Добавление нового типа в контекст

```text
[feat/type] context - добавлен новый тип enum

### Основные изменения:
- Добавлен тип enum для создания перечислений в контекстах
- Реализована поддержка required/optional для enum типов
- Добавлена типизация для enum значений

### Улучшения кода:
- Обновлены типы в context.t.ts для поддержки enum
- Улучшена документация JSDoc для enum типов
```

### 2. Рефакторинг системы контекстов

```text
[refactor] context - оптимизирована инициализация контекста

### Улучшения кода:
- Упрощена логика инициализации значений по умолчанию
- Улучшена производительность создания контекстов
- Оптимизирована работа с Proxy для иммутабельности
```

### 3. Исправление бага в типизации

```text
[fix/type] context - исправлена типизация optional полей

### Основные изменения:
- Исправлена ошибка в типизации optional полей контекста
- Обновлены типы для корректной работы с null значениями

### Исправления в тестах:
- Добавлены тесты для проверки optional полей
- Обновлены снапшоты в context.spec.ts
```

### 4. Добавление тестов

```text
[test] context - добавлены тесты иммутабельности

### Основные изменения:
- Добавлены тесты для проверки иммутабельности контекста
- Реализованы тесты для метода update()
- Добавлены тесты для различных типов данных

### Исправления в тестах:
- Обновлены существующие тесты для совместимости
- Исправлены снапшоты в context.spec.ts
```

### 5. Комбинированные изменения

```text
[feat/test/type] context - добавлена поддержка массивов

### Основные изменения:
- Добавлен тип array для работы с массивами в контекстах
- Реализована поддержка типизированных массивов

### Улучшения кода:
- Обновлены типы в context.t.ts для поддержки массивов
- Улучшена документация JSDoc

### Исправления в тестах:
- Добавлены тесты для работы с массивами
- Обновлены снапшоты в context.spec.ts
```

---

**Это правило обязательно для всех git-коммитов и не подлежит игнорированию.**

---

## Формат сообщения

```text
[<тип>/<тип>/..] <область> - <краткое описание>

### Основные изменения:
- Ключевые изменения в логике, API или функциональности

### Улучшения кода:
- Улучшения структуры, рефакторинг, исправления форматирования

### Исправления в тестах:
- Исправления тестов, обновления снапшотов, изменение тест-кейсов
```

> **Примечание:**
> Если изменений в коде или тестах нет — секции "### Улучшения кода" и/или "### Исправления в тестах" не включать в сообщение коммита.

## Важно: оформление многострочных сообщений коммита

- Для многострочных сообщений используйте только here-document (stdin).
- Не используйте флаг `-m` для передачи многострочного сообщения — это приводит к появлению экранированных символов (`\\n`) вместо реальных переводов строк.
- Пример правильного оформления через stdin:

  ```sh
  git commit -F - <<EOF
  [feat] context - добавлен новый тип enum

  ### Основные изменения:
  - Добавлен тип enum для создания перечислений в контекстах
  - Реализована поддержка required/optional для enum типов
  EOF
  ```

- Проверьте итоговое сообщение коммита через `git log -1` или в графическом интерфейсе, чтобы убедиться в отсутствии экранированных символов и корректных отступах.

---

**Это правило обязательно для всех git-коммитов и не подлежит игнорированию.**

---
